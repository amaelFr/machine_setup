- name: remove folder if existing
  ansible.builtin.file:
    path: /var/CHROOT/{{ chroot.name }}
    state: absent

- name: Add chroot folder
  ansible.builtin.file:
    path: /var/CHROOT/{{ chroot.name }}
    state: directory
    mode: '0755'

- name: Create dev folder
  ansible.builtin.file:
    state: directory
    mode: '0755'
    path: "/var/CHROOT/{{ chroot.name }}/dev"
- name:
  shell:
    cmd: |
      mknod -m 666 /var/CHROOT/{{ chroot.name }}/dev/null c 1 3
      mknod -m 666 /var/CHROOT/{{ chroot.name }}/dev/tty c 5 0
      mknod -m 666 /var/CHROOT/{{ chroot.name }}/dev/zero c 1 5
      mknod -m 666 /var/CHROOT/{{ chroot.name }}/dev/random c 1 8


- name: Create etc folder
  ansible.builtin.file:
    state: directory
    mode: '0755'
    path: "/var/CHROOT/{{ chroot.name }}/etc"
- name: Get passwd and group
  copy:
    remote_src: true
    src: "/etc/{{ item }}"
    dest: "/var/CHROOT/{{ chroot.name }}/etc/{{ item }}"
    mode: '0644'
  loop:
    - passwd
    - group

- name: Create binary folder
  ansible.builtin.file:
    state: directory
    mode: '0755'
    path: "/var/CHROOT/{{ chroot.name }}/bin"
  
- name: Get dependencies
  shell:
    cmd: "which {{ item }}"
  loop: "{{ chroot.binaries }}"
  register: binaries

- name: Get binaries
  copy:
    remote_src: true
    src: "{{ binaries['results'][binary_i]['stdout_lines'][0] }}"
    dest: "/var/CHROOT/{{ chroot.name }}/bin/{{ binary }}"
    mode: '0755'
  loop_control:
    index_var: binary_i
    loop_var: binary
  loop: "{{ chroot.binaries }}"


- name: Get dependencies
  shell:
    cmd: "ldd $(which {{ item }})"
  loop: "{{ chroot.binaries }}"
  register: binaries_dependency

- name: Add lib folder
  ansible.builtin.file:
    state: directory
    mode: '0755'
    path: "/var/CHROOT/{{ chroot.name }}{{ item | regex_replace('^.*(/lib(64)?/[a-zA-Z0-9/_\\-\\.]+).*$', '\\1') | dirname }}"
  when: item | regex_search('(/lib(64)?/[a-zA-Z0-9/_\\-\\.]+)')
  with_items: "{{ query('subelements', binaries_dependency['results'], 'stdout_lines') }}"

- name: Get librairy
  copy:
    mode: '0755'
    remote_src: true
    src: "{{ item | regex_replace('^.*(/lib(64)?/[a-zA-Z0-9/_\\-\\.]+).*$', '\\1') }}"
    dest: "/var/CHROOT/{{ chroot.name }}{{ item | regex_replace('^.*(/lib(64)?/[a-zA-Z0-9/_\\-\\.]+).*$', '\\1') }}"
  when: item | regex_search('(/lib(64)?/[a-zA-Z0-9/_\\-\\.]+)')
  with_items: "{{ query('subelements', binaries_dependency['results'], 'stdout_lines') }}"
